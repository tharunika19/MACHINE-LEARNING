{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "45669fe1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    10\n",
      "1    20\n",
      "2    30\n",
      "3    40\n",
      "4    50\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "data = [10, 20, 30, 40, 50] \n",
    "series = pd. Series (data)\n",
    "print(series) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "277155b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x     1\n",
      "y     7\n",
      "z    21\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "a = [1, 7, 21]\n",
    "myvar = pd.Series(a, index=[\"x\", \"y\", \"z\"])\n",
    "print(myvar)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "55d2ab74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    10\n",
      "1    20\n",
      "2    30\n",
      "3    40\n",
      "4    50\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "series = pd.Series([10, 20, 30, 40, 50])\n",
    "print(series)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ee1bf053",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    False\n",
      "1    False\n",
      "2     True\n",
      "3     True\n",
      "4     True\n",
      "dtype: bool\n",
      "2    30\n",
      "3    40\n",
      "4    50\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "gt = series > 25\n",
    "print(gt)\n",
    "\n",
    "series_filtered = series[gt]\n",
    "print(series_filtered)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "34fbf9bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     20\n",
      "1     40\n",
      "2     60\n",
      "3     80\n",
      "4    100\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "series_multiplied = series * 2\n",
    "print(series_multiplied)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0431c962",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    3.162278\n",
      "1    4.472136\n",
      "2    5.477226\n",
      "3    6.324555\n",
      "4    7.071068\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "series_sqrt = np.sqrt(series)\n",
    "print(series_sqrt)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f6713397",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   calories  duration\n",
      "0       420        50\n",
      "1       380        40\n",
      "2       390        45\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "data = {\n",
    "    \"calories\": [420, 380, 390],\n",
    "    \"duration\": [50, 40, 45]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "186a5c72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    state  year  pop\n",
      "0    Ohio  2000  1.5\n",
      "1    Ohio  2001  1.7\n",
      "2    Ohio  2002  3.6\n",
      "3  Nevada  2001  2.4\n",
      "4  Nevada  2002  2.9\n",
      "5  Nevada  2003  3.2\n"
     ]
    }
   ],
   "source": [
    "data = {\n",
    "    'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'],\n",
    "    'year': [2000, 2001, 2002, 2001, 2002, 2003],\n",
    "    'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]\n",
    "}\n",
    "frame = pd.DataFrame(data)\n",
    "print(frame)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d56d070e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   year   state  pop\n",
      "0  2000    Ohio  1.5\n",
      "1  2001    Ohio  1.7\n",
      "2  2002    Ohio  3.6\n",
      "3  2001  Nevada  2.4\n",
      "4  2002  Nevada  2.9\n",
      "5  2003  Nevada  3.2\n"
     ]
    }
   ],
   "source": [
    "frame = pd.DataFrame(data, columns=['year', 'state', 'pop'])\n",
    "print(frame)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "73f716c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       year   state  pop debt\n",
      "one    2000    Ohio  1.5  NaN\n",
      "two    2001    Ohio  1.7  NaN\n",
      "three  2002    Ohio  3.6  NaN\n",
      "four   2001  Nevada  2.4  NaN\n",
      "five   2002  Nevada  2.9  NaN\n",
      "six    2003  Nevada  3.2  NaN\n"
     ]
    }
   ],
   "source": [
    "frame2 = pd.DataFrame(data, columns=['year', 'state', 'pop', 'debt'],\n",
    "                      index=['one', 'two', 'three', 'four', 'five', 'six'])\n",
    "print(frame2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2dd9abb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "one      2000\n",
      "two      2001\n",
      "three    2002\n",
      "four     2001\n",
      "five     2002\n",
      "six      2003\n",
      "Name: year, dtype: int64\n",
      "one        Ohio\n",
      "two        Ohio\n",
      "three      Ohio\n",
      "four     Nevada\n",
      "five     Nevada\n",
      "six      Nevada\n",
      "Name: state, dtype: object\n",
      "one        Ohio\n",
      "two        Ohio\n",
      "three      Ohio\n",
      "four     Nevada\n",
      "five     Nevada\n",
      "six      Nevada\n",
      "Name: state, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(frame2['year'])\n",
    "print(frame2['state'])\n",
    "print(frame2.state)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ed1aa86e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "year     2000\n",
      "state    Ohio\n",
      "pop       1.5\n",
      "debt      NaN\n",
      "Name: one, dtype: object\n",
      "       year state  pop debt\n",
      "two    2001  Ohio  1.7  NaN\n",
      "three  2002  Ohio  3.6  NaN\n"
     ]
    }
   ],
   "source": [
    "print(frame2.loc['one'])\n",
    "print(frame2.loc[['two', 'three']])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8cd25ce2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       year   state  pop  debt\n",
      "one    2000    Ohio  1.5  12.4\n",
      "two    2001    Ohio  1.7  12.4\n",
      "three  2002    Ohio  3.6  12.4\n",
      "four   2001  Nevada  2.4  12.4\n",
      "five   2002  Nevada  2.9  12.4\n",
      "six    2003  Nevada  3.2  12.4\n"
     ]
    }
   ],
   "source": [
    "frame2['debt'] = 12.4\n",
    "print(frame2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "729e49ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       year   state  pop  debt\n",
      "one    2000    Ohio  1.5   0.0\n",
      "two    2001    Ohio  1.7   1.0\n",
      "three  2002    Ohio  3.6   2.0\n",
      "four   2001  Nevada  2.4   3.0\n",
      "five   2002  Nevada  2.9   4.0\n",
      "six    2003  Nevada  3.2   5.0\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "frame2['debt'] = np.arange(6.)\n",
    "print(frame2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "90265fd1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       year   state  pop  debt\n",
      "one    2000    Ohio  1.5   NaN\n",
      "two    2001    Ohio  1.7  -1.2\n",
      "three  2002    Ohio  3.6   NaN\n",
      "four   2001  Nevada  2.4  -1.5\n",
      "five   2002  Nevada  2.9  -1.7\n",
      "six    2003  Nevada  3.2   NaN\n"
     ]
    }
   ],
   "source": [
    "val = pd.Series([-1.2, -1.5, -1.7], index=['two', 'four', 'five'])\n",
    "frame2['debt'] = val\n",
    "print(frame2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3b57f097",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       year   state  pop  debt  eastern\n",
      "one    2000    Ohio  1.5   NaN     True\n",
      "two    2001    Ohio  1.7  -1.2     True\n",
      "three  2002    Ohio  3.6   NaN     True\n",
      "four   2001  Nevada  2.4  -1.5    False\n",
      "five   2002  Nevada  2.9  -1.7    False\n",
      "six    2003  Nevada  3.2   NaN    False\n"
     ]
    }
   ],
   "source": [
    "frame2['eastern'] = frame2.state == 'Ohio'\n",
    "print(frame2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8f88a978",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          one   two three    four    five     six\n",
      "year     2000  2001  2002    2001    2002    2003\n",
      "state    Ohio  Ohio  Ohio  Nevada  Nevada  Nevada\n",
      "pop       1.5   1.7   3.6     2.4     2.9     3.2\n",
      "debt      NaN  -1.2   NaN    -1.5    -1.7     NaN\n",
      "eastern  True  True  True   False   False   False\n"
     ]
    }
   ],
   "source": [
    "print(frame2.T)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9cc6072a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d    4.5\n",
      "b    7.2\n",
      "a   -5.3\n",
      "c    3.6\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "obj = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])\n",
    "print(obj)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4eeb6bde",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a   -5.3\n",
      "b    7.2\n",
      "c    3.6\n",
      "d    4.5\n",
      "e    NaN\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "obj2 = obj.reindex(['a', 'b', 'c', 'd', 'e'])\n",
    "print(obj2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b92ec57a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      blue\n",
      "2    purple\n",
      "4    yellow\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "obj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])\n",
    "print(obj3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "09342ae0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      blue\n",
      "1      blue\n",
      "2    purple\n",
      "3    purple\n",
      "4    yellow\n",
      "5    yellow\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "obj4 = obj3.reindex(range(6), method='ffill')\n",
    "print(obj4)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "43c83c2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      blue\n",
      "1    purple\n",
      "2    purple\n",
      "3    yellow\n",
      "4    yellow\n",
      "5       NaN\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "obj5 = obj3.reindex(range(6), method='bfill')\n",
    "print(obj5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c0cead63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      blue\n",
      "1       red\n",
      "2    purple\n",
      "3       red\n",
      "4    yellow\n",
      "5       red\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "obj6 = obj3.reindex(range(6), fill_value='red')\n",
    "print(obj6)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "78d879ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    1.0\n",
      "1    1.0\n",
      "2    2.0\n",
      "3    2.0\n",
      "4    NaN\n",
      "5    3.0\n",
      "6    3.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "obj7 = pd.Series([1, 2, 3], index=[0, 2, 5])\n",
    "obj8 = obj7.reindex(range(7), method='ffill', limit=1)\n",
    "print(obj8)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ba2c8f66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a    0.0\n",
      "b    1.0\n",
      "d    3.0\n",
      "e    4.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "obj = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e'])\n",
    "new_obj = obj.drop('c')\n",
    "print(new_obj)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "035b4f69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a    0.0\n",
      "b    1.0\n",
      "e    4.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(obj.drop(['d', 'c']))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "48f098f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          one  two  three  four\n",
      "Ohio        0    1      2     3\n",
      "Dallas      4    5      6     7\n",
      "NJ          8    9     10    11\n",
      "New York   12   13     14    15\n"
     ]
    }
   ],
   "source": [
    "data = pd.DataFrame(\n",
    "    np.arange(16).reshape((4, 4)),\n",
    "    index=['Ohio', 'Dallas', 'NJ', 'New York'],\n",
    "    columns=['one', 'two', 'three', 'four']\n",
    ")\n",
    "print(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8a9b0e9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          one  two  three  four\n",
      "Dallas      4    5      6     7\n",
      "New York   12   13     14    15\n"
     ]
    }
   ],
   "source": [
    "print(data.drop(['NJ', 'Ohio']))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2b866b99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "obj['b'] =\n",
      " 1.0\n",
      "obj[1] =\n",
      " 1.0\n",
      "obj[2:4] =\n",
      " c    2.0\n",
      "d    3.0\n",
      "dtype: float64\n",
      "obj[['b', 'a', 'd']] =\n",
      " b    1.0\n",
      "a    0.0\n",
      "d    3.0\n",
      "dtype: float64\n",
      "obj['b':'d'] =\n",
      " b    1.0\n",
      "c    2.0\n",
      "d    3.0\n",
      "dtype: float64\n",
      "obj[[1, 3]] =\n",
      " b    1.0\n",
      "d    3.0\n",
      "dtype: float64\n",
      "obj[obj < 2] =\n",
      " a    0.0\n",
      "b    1.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "obj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])\n",
    "print(\"obj['b'] =\\n\", obj['b'])\n",
    "print(\"obj[1] =\\n\", obj.iloc[1])\n",
    "print(\"obj[2:4] =\\n\", obj[2:4])\n",
    "print(\"obj[['b', 'a', 'd']] =\\n\", obj[['b', 'a', 'd']])\n",
    "print(\"obj['b':'d'] =\\n\", obj['b':'d'])\n",
    "print(\"obj[[1, 3]] =\\n\", obj.iloc[[1, 3]])\n",
    "print(\"obj[obj < 2] =\\n\", obj[obj < 2])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4d38c034",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          one  two  three  four\n",
      "Ohio        0    1      2     3\n",
      "Dallas      4    5      6     7\n",
      "Boston      8    9     10    11\n",
      "NJ         12   13     14    15\n",
      "New York   16   17     18    19\n",
      "Austin     20   21     22    23\n"
     ]
    }
   ],
   "source": [
    "data = pd.DataFrame(\n",
    "    np.arange(24).reshape((6, 4)),\n",
    "    index=['Ohio', 'Dallas', 'Boston', 'NJ', 'New York', 'Austin'],\n",
    "    columns=['one', 'two', 'three', 'four']\n",
    ")\n",
    "print(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f4cabe97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ohio         1\n",
      "Dallas       5\n",
      "Boston       9\n",
      "NJ          13\n",
      "New York    17\n",
      "Austin      21\n",
      "Name: two, dtype: int32\n"
     ]
    }
   ],
   "source": [
    "print(data['two'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ed17d01f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          one  two  three  four\n",
      "Dallas      4    5      6     7\n",
      "Boston      8    9     10    11\n",
      "NJ         12   13     14    15\n",
      "New York   16   17     18    19\n"
     ]
    }
   ],
   "source": [
    "print(data[1:5])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "7591a12c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "two      5\n",
      "three    6\n",
      "Name: Dallas, dtype: int32\n"
     ]
    }
   ],
   "source": [
    "print(data.loc['Dallas', ['two', 'three']])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8e3081c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "print(data.at['Dallas', 'one'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "69227190",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "one      12\n",
      "two      13\n",
      "three    14\n",
      "four     15\n",
      "Name: NJ, dtype: int32\n"
     ]
    }
   ],
   "source": [
    "print(data.iloc[3])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "08395003",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          one  two\n",
      "Boston      8    9\n",
      "NJ         12   13\n",
      "New York   16   17\n"
     ]
    }
   ],
   "source": [
    "print(data.iloc[2:5, 0:2])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d1f71383",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        one  two  three  four\n",
      "Dallas    4    5      6     7\n",
      "Boston    8    9     10    11\n",
      "NJ       12   13     14    15\n"
     ]
    }
   ],
   "source": [
    "print(data.iloc[1:4, :])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "46bf3a3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ohio        False\n",
      "Dallas       True\n",
      "Boston       True\n",
      "NJ           True\n",
      "New York     True\n",
      "Austin       True\n",
      "Name: three, dtype: bool\n",
      "          one  two  three  four\n",
      "Dallas      4    5      6     7\n",
      "Boston      8    9     10    11\n",
      "NJ         12   13     14    15\n",
      "New York   16   17     18    19\n",
      "Austin     20   21     22    23\n"
     ]
    }
   ],
   "source": [
    "print(data['three'] > 5)\n",
    "print(data[data['three'] > 5])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a9e0c917",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            one    two  three   four\n",
      "Ohio       True   True   True   True\n",
      "Dallas     True  False  False  False\n",
      "Boston    False  False  False  False\n",
      "NJ        False  False  False  False\n",
      "New York  False  False  False  False\n",
      "Austin    False  False  False  False\n",
      "          one  two  three  four\n",
      "Ohio      0.0  1.0    2.0   3.0\n",
      "Dallas    4.0  NaN    NaN   NaN\n",
      "Boston    NaN  NaN    NaN   NaN\n",
      "NJ        NaN  NaN    NaN   NaN\n",
      "New York  NaN  NaN    NaN   NaN\n",
      "Austin    NaN  NaN    NaN   NaN\n"
     ]
    }
   ],
   "source": [
    "print(data < 5)\n",
    "print(data[data < 5])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a22a3439",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   A  B\n",
      "0  1  4\n",
      "1  2  5\n",
      "2  3  6\n",
      "   A   B\n",
      "0  7  10\n",
      "1  8  11\n",
      "2  9  12\n",
      "Addition: \n",
      "     A   B\n",
      "0   8  14\n",
      "1  10  16\n",
      "2  12  18\n",
      "\n",
      "Subtraction: \n",
      "    A  B\n",
      "0 -6 -6\n",
      "1 -6 -6\n",
      "2 -6 -6\n",
      "\n",
      "Multiplication: \n",
      "     A   B\n",
      "0   7  40\n",
      "1  16  55\n",
      "2  27  72\n",
      "\n",
      "Division: \n",
      "           A         B\n",
      "0  0.142857  0.400000\n",
      "1  0.250000  0.454545\n",
      "2  0.333333  0.500000\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n",
    "df2 = pd.DataFrame({'A': [7, 8, 9], 'B': [10, 11, 12]})\n",
    "\n",
    "print(df1)\n",
    "print(df2)\n",
    "\n",
    "print(\"Addition: \\n\", df1 + df2)\n",
    "print(\"\\nSubtraction: \\n\", df1 - df2)\n",
    "print(\"\\nMultiplication: \\n\", df1 * df2)\n",
    "print(\"\\nDivision: \\n\", df1 / df2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "fd4875b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   A  B\n",
      "0  1  4\n",
      "1  2  5\n",
      "2  3  6\n",
      "   B   C\n",
      "1  7  10\n",
      "2  8  11\n",
      "3  9  12\n",
      "Result of df3 + df4 with alignment: \n",
      "     A     B   C\n",
      "0 NaN   NaN NaN\n",
      "1 NaN  12.0 NaN\n",
      "2 NaN  14.0 NaN\n",
      "3 NaN   NaN NaN\n",
      "\n",
      "Result of df3.add(df4) with fill_value=0:\n",
      "      A     B     C\n",
      "0  1.0   4.0   NaN\n",
      "1  2.0  12.0  10.0\n",
      "2  3.0  14.0  11.0\n",
      "3  NaN   9.0  12.0\n"
     ]
    }
   ],
   "source": [
    "df3 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}, index=[0, 1, 2])\n",
    "df4 = pd.DataFrame({'B': [7, 8, 9], 'C': [10, 11, 12]}, index=[1, 2, 3])\n",
    "\n",
    "print(df3)\n",
    "print(df4)\n",
    "\n",
    "result = df3 + df4\n",
    "print(\"Result of df3 + df4 with alignment: \\n\", result)\n",
    "\n",
    "result_add = df3.add(df4, fill_value=0)\n",
    "print(\"\\nResult of df3.add(df4) with fill_value=0:\\n\", result_add)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9b2de55d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a    1\n",
      "b    2\n",
      "c    3\n",
      "d    0\n",
      "dtype: int64\n",
      "I \n",
      "        d  a  b  c\n",
      "one    4  5  6  7\n",
      "three  0  1  2  3\n",
      "II \n",
      "        a  b  c  d\n",
      "three  1  2  3  0\n",
      "one    5  6  7  4\n",
      "III \n",
      "        d  c  b  a\n",
      "three  0  3  2  1\n",
      "one    4  7  6  5\n",
      "IV \n",
      "        d  a  b  c\n",
      "three  0  1  2  3\n",
      "one    4  5  6  7\n"
     ]
    }
   ],
   "source": [
    "obj = pd.Series(range(4), index=['d', 'a', 'b', 'c'])\n",
    "df_sort_series = obj.sort_index()\n",
    "print(df_sort_series)\n",
    "\n",
    "frame = pd.DataFrame(np.arange(8).reshape((2, 4)), index=['three', 'one'], columns=['d', 'a', 'b', 'c'])\n",
    "df_sort_dataframe = frame.sort_index()\n",
    "print(\"I \\n\", df_sort_dataframe)\n",
    "\n",
    "df_sort_dataframe_axis1 = frame.sort_index(axis=1)\n",
    "print(\"II \\n\", df_sort_dataframe_axis1)\n",
    "\n",
    "df_sort_dataframe_ascending = frame.sort_index(axis=1, ascending=False)\n",
    "print(\"III \\n\", df_sort_dataframe_ascending)\n",
    "\n",
    "df_sort_values_by_column = frame.sort_values(by='b')\n",
    "print(\"IV \\n\", df_sort_values_by_column)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "32ebcb51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rank \n",
      " 0    6.5\n",
      "1    1.0\n",
      "2    6.5\n",
      "3    4.0\n",
      "4    3.0\n",
      "5    2.0\n",
      "6    5.0\n",
      "dtype: float64\n",
      "rank- Method-first \n",
      " 0    6.0\n",
      "1    1.0\n",
      "2    7.0\n",
      "3    4.0\n",
      "4    3.0\n",
      "5    2.0\n",
      "6    5.0\n",
      "dtype: float64\n",
      "rank- Method=max \n",
      " 0    2.0\n",
      "1    7.0\n",
      "2    2.0\n",
      "3    4.0\n",
      "4    5.0\n",
      "5    6.0\n",
      "6    3.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "obj = pd.Series([7, -5, 7, 3, 2, 0, 4])\n",
    "df_rank = obj.rank()\n",
    "print(\"Rank \\n\", df_rank)\n",
    "\n",
    "df_rank_method_first = obj.rank(method='first')\n",
    "print(\"rank- Method-first \\n\", df_rank_method_first)\n",
    "\n",
    "df_rank_ascending = obj.rank(ascending=False, method='max')\n",
    "print(\"rank- Method=max \\n\", df_rank_ascending)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b4afb886",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rank over rows \n",
      "      b   a    c\n",
      "0  4.3   0 -2.0\n",
      "1  7.0   1  5.0\n",
      "2 -3.0   0  8.0\n",
      "3  2.0  11 -2.5\n",
      "Rank over columns \n",
      "      b    a    c\n",
      "0  3.0  2.0  1.0\n",
      "1  3.0  1.0  2.0\n",
      "2  1.0  2.0  3.0\n",
      "3  2.0  3.0  1.0\n"
     ]
    }
   ],
   "source": [
    "frame = pd.DataFrame({\n",
    "    'b': [4.3, 7, -3, 2],\n",
    "    'a': [0, 1, 0, 11],\n",
    "    'c': [-2, 5, 8, -2.5]\n",
    "})\n",
    "\n",
    "print(\"Rank over rows \\n\", frame)\n",
    "df_rank_dataframe = frame.rank(axis='columns')\n",
    "print(\"Rank over columns \\n\", df_rank_dataframe)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20c15dbc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
